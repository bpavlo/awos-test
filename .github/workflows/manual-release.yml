
name: Manual Release

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          registry-url: 'https://registry.npmjs.org/'

      - name: Get release draft info
        id: get_release_draft
        uses: actions/github-script@v6
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const draft = releases.find(release => release.draft === true);
            if (!draft) {
              core.setFailed('No draft release found. Please create a draft release first.');
              return;
            }
            
            const tagName = draft.tag_name;
            const version = tagName.replace(/^v/, '');
            
            core.setOutput('draft_id', draft.id);
            core.setOutput('tag_name', tagName);
            core.setOutput('version', version);
            core.setOutput('release_body', draft.body);
            
            console.log(`Found draft release: ${tagName}`);
            console.log(`Draft ID: ${draft.id}`);
            console.log(`Version: ${version}`);

      - name: Update package.json version
        run: npm version ${{ steps.get_release_draft.outputs.version }} --no-git-tag-version

      - name: Install dependencies
        run: npm install

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

      - name: Create git tag
        run: |
          git tag ${{ steps.get_release_draft.outputs.tag_name }}
          git push origin ${{ steps.get_release_draft.outputs.tag_name }}

      - name: Publish Release (convert draft to published)
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: '${{ steps.get_release_draft.outputs.draft_id }}',
              draft: false
            });
            
            console.log('Successfully published release ${{ steps.get_release_draft.outputs.tag_name }}');

